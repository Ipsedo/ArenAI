apply plugin: 'com.android.application'

android {
    compileSdkVersion 36
    defaultConfig {
        applicationId "com.samuelberrien.phyvr"
        minSdkVersion 30
        targetSdkVersion 36
        versionCode 17
        versionName "2.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        externalNativeBuild {
            cmake {
                arguments "-DCMAKE_VERBOSE_MAKEFILE=ON"
            }
        }
    }
    buildTypes {
        debug {
            externalNativeBuild {
                cmake {
                    cppFlags "-O1"
                }
            }
        }
        release {
            externalNativeBuild {
                cmake {
                    cppFlags "-O3"
                }
            }
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_10
        targetCompatibility JavaVersion.VERSION_1_10
    }
    ndkVersion "26.3.11579264"
    namespace 'com.samuelberrien.phyvr'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.7.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
    implementation platform("org.jetbrains.kotlin:kotlin-bom:1.8.0")
}

// Desktop training

def cmakePath = "cmake"

def hostSrcDir         = "${projectDir}/src/main/host"
def hostBuildDir       = "${project.layout.buildDirectory.get()}/build_train"
def hostTargetName= "phyvr_train_host"
def hostBuildType = (project.findProperty("hostBuildType") ?: "Release")
def exeSuffix = System.getProperty("os.name").toLowerCase().contains("win") ? ".exe" : ""
def runArgs = (project.findProperty("runArgs") ?: "").toString().trim()

tasks.register("cmakeConfigureHost", Exec) {
    group = "host"
    description = "Configure CMake for HOST (desktop) build"

    doFirst {
        file(hostBuildDir).mkdirs()
    }
    commandLine cmakePath,
            "-S", hostSrcDir,
            "-B", hostBuildDir,
            "-DCMAKE_BUILD_TYPE=${hostBuildType}",
            "-DCMAKE_CXX_FLAGS='-O3'"
}

tasks.register("cmakeBuildHost", Exec) {
    group = "host"
    description = "Build HOST (desktop) C++ target with CMake"
    dependsOn "cmakeConfigureHost"

    commandLine cmakePath,
            "--build", hostBuildDir,
            "--config", hostBuildType,
            "--", "-j", Runtime.runtime.availableProcessors().toString()
}

tasks.register("runHostProgram", Exec) {
    group = "host"
    description = "Run the HOST (desktop) executable built by CMake"
    dependsOn "cmakeBuildHost"

    doFirst {
        def exePath = "${hostBuildDir}/${hostTargetName}${exeSuffix}"
        if (!file(exePath).exists()) {
            throw new GradleException("Executable not found at ${exePath}. ")
        }

        if (runArgs.isEmpty()) {
            commandLine exePath
        } else {
            def pathWithArgs = [exePath] + runArgs.split("\\s+")
            commandLine pathWithArgs.iterator()
        }
    }
}
